#!/usr/bin/env ruby

##############################################################################
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# Find the sum of all the even-valued terms in the sequence which do not
# exceed four million.
##############################################################################

# NOTES:
# from wikipedia:
# The sum of the first n Fibonacci numbers, Fj, such that j is even, is the
# (2n + 1)th Fibonacci number minus 1.



upper_bound = ARGV[0].to_i
upper_bound = 400000 if upper_bound.eql?(0)


fibs = {0 => 0, 1 => 1}


# this is ugly as shit...
# could be done *MUCH* better


def fib2(fibs)
  return Proc.new do |n|
    if n == 0 || n == 1
      fibs[n]
    else
      fibs[n] = fibs[(n - 1)] + fibs[(n - 2)]
    end
  end
end

n = 0
fib = fib2(fibs)
while (fib.call(n) <= upper_bound)
  n += 1
  fib.call(n)
end

fibs.delete_if {|k, v| v > upper_bound}

result = fibs.values.reduce(0) {|m, v| m += v % 2 == 0 ? v : 0}
puts "#{result}"
